import prisma from '../config/database.js';

export const createReview = async (req, res) => {
  try {
    const { gameId, rating, title, content, summary } = req.body;
    const userId = req.user.id; // Vem do middleware de autenticação

    // Verificar se o jogo existe
    const game = await prisma.game.findUnique({
      where: { id: gameId }
    });

    if (!game) {
      return res.status(404).json({ error: 'Jogo não encontrado' });
    }

    // Verificar se o usuário já fez review para este jogo
    const existingReview = await prisma.review.findFirst({
      where: {
        userId,
        gameId
      }
    });

    if (existingReview) {
      return res.status(400).json({ error: 'Você já fez uma review para este jogo' });
    }

    const review = await prisma.review.create({
      data: {
        rating,
        title,
        content,
        summary,
        userId,
        gameId
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            avatarUrl: true
          }
        },
        game: {
          select: {
            id: true,
            title: true,
            coverUrl: true
          }
        }
      }
    });

    res.status(201).json(review);
  } catch (error) {
    console.error('Erro ao criar review:', error);
    res.status(500).json({ error: 'Erro ao criar review' });
  }
};

export const getAllReviews = async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 10, 
      sort = 'createdAt', 
      order = 'desc',
      gameId,
      userId 
    } = req.query;

    const skip = (page - 1) * limit;
    const orderBy = { [sort]: order };

    const where = {};
    if (gameId) where.gameId = gameId;
    if (userId) where.userId = userId;

    const [reviews, total] = await Promise.all([
      prisma.review.findMany({
        where,
        skip: parseInt(skip),
        take: parseInt(limit),
        orderBy,
        include: {
          user: {
            select: {
              id: true,
              name: true,
              avatarUrl: true
            }
          },
          game: {
            select: {
              id: true,
              title: true,
              coverUrl: true
            }
          }
        }
      }),
      prisma.review.count({ where })
    ]);

    res.json({
      reviews,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('Erro ao buscar reviews:', error);
    res.status(500).json({ error: 'Erro ao buscar reviews' });
  }
};

export const getReviewById = async (req, res) => {
  try {
    const { id } = req.params;

    const review = await prisma.review.findUnique({
      where: { id },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            avatarUrl: true
          }
        },
        game: {
          select: {
            id: true,
            title: true,
            coverUrl: true,
            description: true
          }
        }
      }
    });

    if (!review) {
      return res.status(404).json({ error: 'Review não encontrada' });
    }

    // Incrementar views
    await prisma.review.update({
      where: { id },
      data: { views: { increment: 1 } }
    });

    res.json(review);
  } catch (error) {
    console.error('Erro ao buscar review:', error);
    res.status(500).json({ error: 'Erro ao buscar review' });
  }
};

export const updateReview = async (req, res) => {
  try {
    const { id } = req.params;
    const { rating, title, content, summary } = req.body;
    const userId = req.user.id;

    // Verificar se a review existe e pertence ao usuário
    const existingReview = await prisma.review.findFirst({
      where: { id, userId }
    });

    if (!existingReview) {
      return res.status(404).json({ error: 'Review não encontrada ou você não tem permissão para editá-la' });
    }

    const review = await prisma.review.update({
      where: { id },
      data: { rating, title, content, summary },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            avatarUrl: true
          }
        },
        game: {
          select: {
            id: true,
            title: true,
            coverUrl: true
          }
        }
      }
    });

    res.json(review);
  } catch (error) {
    console.error('Erro ao atualizar review:', error);
    res.status(500).json({ error: 'Erro ao atualizar review' });
  }
};

export const deleteReview = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    // Verificar se a review existe e pertence ao usuário
    const existingReview = await prisma.review.findFirst({
      where: { id, userId }
    });

    if (!existingReview) {
      return res.status(404).json({ error: 'Review não encontrada ou você não tem permissão para excluí-la' });
    }

    await prisma.review.delete({
      where: { id }
    });

    res.status(204).send();
  } catch (error) {
    console.error('Erro ao deletar review:', error);
    res.status(500).json({ error: 'Erro ao deletar review' });
  }
};

export const getRecentReviews = async (req, res) => {
  try {
    const { limit = 5 } = req.query;

    const reviews = await prisma.review.findMany({
      take: parseInt(limit),
      orderBy: { createdAt: 'desc' },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            avatarUrl: true
          }
        },
        game: {
          select: {
            id: true,
            title: true,
            coverUrl: true
          }
        }
      }
    });

    res.json(reviews);
  } catch (error) {
    console.error('Erro ao buscar reviews recentes:', error);
    res.status(500).json({ error: 'Erro ao buscar reviews recentes' });
  }
};

export const getPopularReviews = async (req, res) => {
  try {
    const { limit = 5 } = req.query;

    const reviews = await prisma.review.findMany({
      take: parseInt(limit),
      orderBy: [
        { views: 'desc' },
        { likes: 'desc' }
      ],
      include: {
        user: {
          select: {
            id: true,
            name: true,
            avatarUrl: true
          }
        },
        game: {
          select: {
            id: true,
            title: true,
            coverUrl: true
          }
        }
      }
    });

    res.json(reviews);
  } catch (error) {
    console.error('Erro ao buscar reviews populares:', error);
    res.status(500).json({ error: 'Erro ao buscar reviews populares' });
  }
};