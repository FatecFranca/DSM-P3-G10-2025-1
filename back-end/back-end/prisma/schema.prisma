// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // URL do banco de dados MongoDB
}


// Usuário do sistema
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  avatarUrl String?
  reviews   Review[]
  createdAt DateTime @default(now())
}

// Jogo cadastrado
model Game {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  coverUrl    String?
  releaseDate DateTime?
  genreIds    String[]  @db.ObjectId // Array de IDs de gêneros
  reviews     Review[]
  createdAt   DateTime  @default(now())
}

model Genre {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  // Não precisa do campo games para MongoDB, mas pode manter se quiser buscar reverso
}


// Review de um usuário para um jogo
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      // 1 a 10
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

// Exemplo de relacionamento N:N entre Game e Genre
// Prisma cria a tabela de junção automaticamente para MongoDB