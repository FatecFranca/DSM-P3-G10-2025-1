generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  username  String?  @unique
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  reviews      Review[]
  reviewReactions ReviewReaction[]
  createdGames Game[]
  favorites    Favorite[]

  @@map("users")
}

model Game {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  coverUrl    String?
  releaseDate DateTime?
  developer   String?
  publisher   String?
  platform    String[]
  genres      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Campo para identificar quem criou o jogo
  createdBy String? @db.ObjectId
  creator   User?   @relation(fields: [createdBy], references: [id])
  
  // Relacionamentos
  reviews   Review[]
  favorites Favorite[]

  @@map("games")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String @db.ObjectId

  reactions ReviewReaction[]

  @@map("reviews")
}

model ReviewReaction {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  type     ReactionType

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @db.ObjectId
  review   Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String   @db.ObjectId

  // Garantir que um usuário só pode ter uma reação por review
  @@unique([userId, reviewId])
  @@map("review_reactions")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String @db.ObjectId

  // Garantir que um usuário só pode favoritar um jogo uma vez
  @@unique([userId, gameId])
  @@map("favorites")
}

// ENUMS
enum ReactionType {
  LIKE
  DISLIKE
}